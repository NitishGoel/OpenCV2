#include "iostream"
#include "opencv2/core/core.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/video/background_segm.hpp"

using namespace std;
using namespace cv;

class BGFGSegmentor{
	Mat gray;
	Mat background;
	Mat backImage;
	Mat foreground;
	double alpha;
	int threshold;

public:
	BGFGSegmentor(){
		threshold=25;
		alpha=0.01;
	}

    void process(Mat &frame){
		Mat output;
		cvtColor(frame, gray, CV_BGR2GRAY);
		if(background.empty())
			gray.convertTo(background, CV_32F);
		
		background.convertTo(backImage, CV_8U);
		
		absdiff(backImage, gray, foreground);
		cv::threshold(foreground, output, threshold, 255, THRESH_BINARY_INV);
	
		accumulateWeighted(gray, background, alpha, output); 
	imshow("Output", output);
		int c= cvWaitKey(10);
		if(char(c)==27)
		{
			exit(0);
		}
	    
	}
};

int main(){
	BGFGSegmentor segmentor;
	VideoCapture capture(0);
	Mat frame;
	if(!capture.isOpened()){
		cout<<"Camera not found "<<endl;
		exit(0);
	}

	while(1){
		capture.read(frame);
		if(!capture.read(frame))
			break;
		imshow("Original", frame);
		int c= cvWaitKey(10);
		if(char(c)==27)
		{
			exit(0);
		}
		segmentor.process(frame);
	}

	return 0;
}
